// This file is auto-generated by @hey-api/openapi-ts

export const $AccessTokenOutput = {
    type: 'object',
    properties: {
        AccessToken: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $AcknowlegdementDto = {
    type: 'object',
    properties: {
        Acknowledgements: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ArgumentType = {
    enum: ['String', 'Integer', 'Boolean', 'Timespan', 'Size', 'Enumeration', 'Path', 'Password', 'Flags', 'Decimal', 'Unknown'],
    type: 'string'
} as const;

export const $Assembly = {
    type: 'object',
    properties: {
        DefinedTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TypeInfo'
            },
            nullable: true,
            readOnly: true
        },
        ExportedTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Type'
            },
            nullable: true,
            readOnly: true
        },
        CodeBase: {
            type: 'string',
            nullable: true,
            readOnly: true,
            deprecated: true
        },
        EntryPoint: {
            '$ref': '#/components/schemas/MethodInfo'
        },
        FullName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        ImageRuntimeVersion: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        IsDynamic: {
            type: 'boolean',
            readOnly: true
        },
        Location: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        ReflectionOnly: {
            type: 'boolean',
            readOnly: true
        },
        IsCollectible: {
            type: 'boolean',
            readOnly: true
        },
        IsFullyTrusted: {
            type: 'boolean',
            readOnly: true
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        EscapedCodeBase: {
            type: 'string',
            nullable: true,
            readOnly: true,
            deprecated: true
        },
        ManifestModule: {
            '$ref': '#/components/schemas/Module'
        },
        Modules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Module'
            },
            nullable: true,
            readOnly: true
        },
        GlobalAssemblyCache: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        HostContext: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        SecurityRuleSet: {
            '$ref': '#/components/schemas/SecurityRuleSet'
        }
    },
    additionalProperties: false
} as const;

export const $BackupAndScheduleInputDto = {
    type: 'object',
    properties: {
        Backup: {
            '$ref': '#/components/schemas/BackupInputDto'
        },
        Schedule: {
            '$ref': '#/components/schemas/ScheduleInputDto'
        }
    },
    additionalProperties: false
} as const;

export const $BackupAndScheduleOutputDto = {
    type: 'object',
    properties: {
        Backup: {
            '$ref': '#/components/schemas/BackupDto'
        },
        Schedule: {
            '$ref': '#/components/schemas/ScheduleDto'
        }
    },
    additionalProperties: false
} as const;

export const $BackupDto = {
    type: 'object',
    properties: {
        ID: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Description: {
            type: 'string',
            nullable: true
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        TargetURL: {
            type: 'string',
            nullable: true
        },
        DBPath: {
            type: 'string',
            nullable: true
        },
        Sources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Settings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SettingDto'
            },
            nullable: true
        },
        Filters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FilterDto'
            },
            nullable: true
        },
        Metadata: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        IsTemporary: {
            type: 'boolean'
        },
        IsUnencryptedOrPassphraseStored: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $BackupInputDto = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            nullable: true
        },
        Description: {
            type: 'string',
            nullable: true
        },
        DBPath: {
            type: 'string',
            nullable: true
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        TargetURL: {
            type: 'string',
            nullable: true
        },
        Sources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Settings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SettingInputDto'
            },
            nullable: true
        },
        Filters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FilterInputDto'
            },
            nullable: true
        },
        Metadata: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Boolean__f__AnonymousType1 = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $CLROSInfoDto = {
    type: 'object',
    properties: {
        Platform: {
            type: 'string',
            nullable: true
        },
        ServicePack: {
            type: 'string',
            nullable: true
        },
        Version: {
            type: 'string',
            nullable: true
        },
        VersionString: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $CallingConventions = {
    enum: ['Standard', 'VarArgs', 'Any', 'HasThis', 'ExplicitThis'],
    type: 'string'
} as const;

export const $ChangelogDto = {
    type: 'object',
    properties: {
        Version: {
            type: 'string',
            nullable: true
        },
        Changelog: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $CommandLineLogOutputDto = {
    type: 'object',
    properties: {
        Pagesize: {
            type: 'integer',
            format: 'int32'
        },
        Offset: {
            type: 'integer',
            format: 'int32'
        },
        Count: {
            type: 'integer',
            format: 'int32'
        },
        Items: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Finished: {
            type: 'boolean'
        },
        Started: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $CommandlineTaskStartedDto = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        ID: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ConstructorInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DeclaringType: {
            '$ref': '#/components/schemas/Type'
        },
        ReflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        Module: {
            '$ref': '#/components/schemas/Module'
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        IsCollectible: {
            type: 'boolean',
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        Attributes: {
            '$ref': '#/components/schemas/MethodAttributes'
        },
        MethodImplementationFlags: {
            '$ref': '#/components/schemas/MethodImplAttributes'
        },
        CallingConvention: {
            '$ref': '#/components/schemas/CallingConventions'
        },
        IsAbstract: {
            type: 'boolean',
            readOnly: true
        },
        IsConstructor: {
            type: 'boolean',
            readOnly: true
        },
        IsFinal: {
            type: 'boolean',
            readOnly: true
        },
        IsHideBySig: {
            type: 'boolean',
            readOnly: true
        },
        IsSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        IsStatic: {
            type: 'boolean',
            readOnly: true
        },
        IsVirtual: {
            type: 'boolean',
            readOnly: true
        },
        IsAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsFamily: {
            type: 'boolean',
            readOnly: true
        },
        IsFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsPrivate: {
            type: 'boolean',
            readOnly: true
        },
        IsPublic: {
            type: 'boolean',
            readOnly: true
        },
        IsConstructedGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericMethodDefinition: {
            type: 'boolean',
            readOnly: true
        },
        ContainsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        MethodHandle: {
            '$ref': '#/components/schemas/RuntimeMethodHandle'
        },
        IsSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        MemberType: {
            '$ref': '#/components/schemas/MemberTypes'
        }
    },
    additionalProperties: false
} as const;

export const $CreateBackupDto = {
    type: 'object',
    properties: {
        ID: {
            type: 'string',
            nullable: true
        },
        Temporary: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $CustomAttributeData = {
    type: 'object',
    properties: {
        AttributeType: {
            '$ref': '#/components/schemas/Type'
        },
        Constructor: {
            '$ref': '#/components/schemas/ConstructorInfo'
        },
        ConstructorArguments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeTypedArgument'
            },
            nullable: true,
            readOnly: true
        },
        NamedArguments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeNamedArgument'
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $CustomAttributeNamedArgument = {
    type: 'object',
    properties: {
        MemberInfo: {
            '$ref': '#/components/schemas/MemberInfo'
        },
        TypedValue: {
            '$ref': '#/components/schemas/CustomAttributeTypedArgument'
        },
        MemberName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        IsField: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $CustomAttributeTypedArgument = {
    type: 'object',
    properties: {
        ArgumentType: {
            '$ref': '#/components/schemas/Type'
        },
        Value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $DayOfWeek = {
    enum: [
        null,
        null,
        null,
        null,
        null,
        null,
        null
    ],
    type: 'string'
} as const;

export const $DeleteBackupOutputDto = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        Reason: {
            type: 'string',
            nullable: true
        },
        ID: {
            type: 'integer',
            format: 'int64',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $DuplicatiOperation = {
    enum: ['Backup', 'Restore', 'List', 'Remove', 'Repair', 'RepairUpdate', 'Verify', 'Compact', 'CreateReport', 'ListRemote', 'Delete', 'Vacuum', 'CustomRunner'],
    type: 'string'
} as const;

export const $EventAttributes = {
    enum: ['None', 'SpecialName', 'RTSpecialName'],
    type: 'string'
} as const;

export const $EventInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DeclaringType: {
            '$ref': '#/components/schemas/Type'
        },
        ReflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        Module: {
            '$ref': '#/components/schemas/Module'
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        IsCollectible: {
            type: 'boolean',
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        MemberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        Attributes: {
            '$ref': '#/components/schemas/EventAttributes'
        },
        IsSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        AddMethod: {
            '$ref': '#/components/schemas/MethodInfo'
        },
        RemoveMethod: {
            '$ref': '#/components/schemas/MethodInfo'
        },
        RaiseMethod: {
            '$ref': '#/components/schemas/MethodInfo'
        },
        IsMulticast: {
            type: 'boolean',
            readOnly: true
        },
        EventHandlerType: {
            '$ref': '#/components/schemas/Type'
        }
    },
    additionalProperties: false
} as const;

export const $Exception = {
    type: 'object',
    properties: {
        TargetSite: {
            '$ref': '#/components/schemas/MethodBase'
        },
        Message: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Data: {
            type: 'object',
            additionalProperties: {},
            nullable: true,
            readOnly: true
        },
        InnerException: {
            '$ref': '#/components/schemas/Exception'
        },
        HelpLink: {
            type: 'string',
            nullable: true
        },
        Source: {
            type: 'string',
            nullable: true
        },
        HResult: {
            type: 'integer',
            format: 'int32'
        },
        StackTrace: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $ExportArgsOnlyDto = {
    type: 'object',
    properties: {
        Backend: {
            type: 'string',
            nullable: true
        },
        Arguments: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Options: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ExportCommandlineDto = {
    type: 'object',
    properties: {
        Command: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $FieldAttributes = {
    enum: ['PrivateScope', 'Private', 'FamANDAssem', 'Assembly', 'Family', 'FamORAssem', 'Public', 'FieldAccessMask', 'Static', 'InitOnly', 'Literal', 'NotSerialized', 'HasFieldRVA', 'SpecialName', 'RTSpecialName', 'HasFieldMarshal', 'PinvokeImpl', 'HasDefault', 'ReservedMask'],
    type: 'string'
} as const;

export const $FieldInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DeclaringType: {
            '$ref': '#/components/schemas/Type'
        },
        ReflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        Module: {
            '$ref': '#/components/schemas/Module'
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        IsCollectible: {
            type: 'boolean',
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        MemberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        Attributes: {
            '$ref': '#/components/schemas/FieldAttributes'
        },
        FieldType: {
            '$ref': '#/components/schemas/Type'
        },
        IsInitOnly: {
            type: 'boolean',
            readOnly: true
        },
        IsLiteral: {
            type: 'boolean',
            readOnly: true
        },
        IsNotSerialized: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        IsPinvokeImpl: {
            type: 'boolean',
            readOnly: true
        },
        IsSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        IsStatic: {
            type: 'boolean',
            readOnly: true
        },
        IsAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsFamily: {
            type: 'boolean',
            readOnly: true
        },
        IsFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsPrivate: {
            type: 'boolean',
            readOnly: true
        },
        IsPublic: {
            type: 'boolean',
            readOnly: true
        },
        IsSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        FieldHandle: {
            '$ref': '#/components/schemas/RuntimeFieldHandle'
        }
    },
    additionalProperties: false
} as const;

export const $FilesystemInput = {
    type: 'object',
    properties: {
        path: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $FilterDto = {
    type: 'object',
    properties: {
        Order: {
            type: 'integer',
            format: 'int64'
        },
        Include: {
            type: 'boolean'
        },
        Expression: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $FilterInputDto = {
    type: 'object',
    properties: {
        Order: {
            type: 'integer',
            format: 'int64'
        },
        Include: {
            type: 'boolean'
        },
        Expression: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $GenerateCaptchaOutput = {
    type: 'object',
    properties: {
        Token: {
            type: 'string',
            nullable: true
        },
        Answer: {
            type: 'string',
            nullable: true
        },
        NoVisualChallenge: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $GenericParameterAttributes = {
    enum: ['None', 'Covariant', 'Contravariant', 'VarianceMask', 'ReferenceTypeConstraint', 'NotNullableValueTypeConstraint', 'DefaultConstructorConstraint', 'SpecialConstraintMask'],
    type: 'string'
} as const;

export const $GetBackupResultDto = {
    type: 'object',
    properties: {
        Schedule: {
            '$ref': '#/components/schemas/ScheduleDto'
        },
        Backup: {
            '$ref': '#/components/schemas/BackupDto'
        },
        DisplayNames: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $GetDbPathDto = {
    type: 'object',
    properties: {
        Exists: {
            type: 'boolean'
        },
        Path: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $GetTaskStateDto = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        ID: {
            type: 'integer',
            format: 'int64'
        },
        ErrorMessage: {
            type: 'string',
            nullable: true
        },
        Exception: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $IBackup = {
    type: 'object',
    properties: {
        ID: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Description: {
            type: 'string',
            nullable: true
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        TargetURL: {
            type: 'string',
            nullable: true
        },
        DBPath: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Sources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Settings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ISetting'
            },
            nullable: true
        },
        Filters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IFilter'
            },
            nullable: true
        },
        Metadata: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        IsTemporary: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $ICommandLineArgument = {
    type: 'object',
    properties: {
        Aliases: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        LongDescription: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        ShortDescription: {
            type: 'string',
            nullable: true
        },
        Type: {
            '$ref': '#/components/schemas/ArgumentType'
        },
        ValidValues: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        DefaultValue: {
            type: 'string',
            nullable: true
        },
        Typename: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Deprecated: {
            type: 'boolean'
        },
        DeprecationMessage: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ICustomAttributeProvider = {
    type: 'object',
    additionalProperties: false
} as const;

export const $IDynamicModule = {
    type: 'object',
    properties: {
        Key: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Description: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DisplayName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Options: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ICommandLineArgument'
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $IFilter = {
    type: 'object',
    properties: {
        Order: {
            type: 'integer',
            format: 'int64'
        },
        Include: {
            type: 'boolean'
        },
        Expression: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $IListResultFileset = {
    type: 'object',
    properties: {
        Version: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        IsFullBackup: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        Time: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        FileCount: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        FileSizes: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $IProgressEventData = {
    type: 'object',
    properties: {
        BackupID: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        TaskID: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        BackendAction: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        BackendPath: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        BackendFileSize: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        BackendFileProgress: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        BackendSpeed: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        BackendIsBlocking: {
            type: 'boolean',
            readOnly: true
        },
        CurrentFilename: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        CurrentFilesize: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        CurrentFileoffset: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        CurrentFilecomplete: {
            type: 'boolean',
            readOnly: true
        },
        Phase: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        OverallProgress: {
            type: 'number',
            format: 'float',
            readOnly: true
        },
        ProcessedFileCount: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        ProcessedFileSize: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        TotalFileCount: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        TotalFileSize: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        StillCounting: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $IRunnerData = {
    type: 'object',
    properties: {
        Backup: {
            '$ref': '#/components/schemas/IBackup'
        },
        ExtraOptions: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true,
            readOnly: true
        },
        FilterStrings: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            readOnly: true
        },
        TaskID: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        BackupID: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Operation: {
            '$ref': '#/components/schemas/DuplicatiOperation'
        }
    },
    additionalProperties: false
} as const;

export const $ISetting = {
    type: 'object',
    properties: {
        Filter: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Value: {
            type: 'string',
            nullable: true
        },
        Argument: {
            '$ref': '#/components/schemas/ICommandLineArgument'
        }
    },
    additionalProperties: false
} as const;

export const $IWebModule = {
    type: 'object',
    properties: {
        Key: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DisplayName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Description: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        SupportedCommands: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ICommandLineArgument'
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $ImportBackupInputDto = {
    type: 'object',
    properties: {
        config: {
            type: 'string',
            nullable: true
        },
        cmdline: {
            type: 'boolean',
            nullable: true
        },
        import_metadata: {
            type: 'boolean',
            nullable: true
        },
        direct: {
            type: 'boolean',
            nullable: true
        },
        passphrase: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ImportBackupOutputDto = {
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            nullable: true
        },
        data: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $Int64StringTuple = {
    type: 'object',
    properties: {
        Item1: {
            type: 'integer',
            format: 'int64'
        },
        Item2: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $IntPtr = {
    type: 'object',
    additionalProperties: false
} as const;

export const $IsBackupActiveDto = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        Active: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $IsDbUsedElsewhereDto = {
    type: 'object',
    properties: {
        inuse: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $IssueSigninTokenInputDto = {
    type: 'object',
    properties: {
        Password: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LayoutKind = {
    enum: ['Sequential', 'Explicit', 'Auto'],
    type: 'string'
} as const;

export const $LicenseDto = {
    type: 'object',
    properties: {
        Title: {
            type: 'string',
            nullable: true
        },
        Url: {
            type: 'string',
            nullable: true
        },
        License: {
            type: 'string',
            nullable: true
        },
        Jsondata: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LiveControlState = {
    enum: ['Running', 'Paused'],
    type: 'string'
} as const;

export const $LocaleDto = {
    type: 'object',
    properties: {
        Code: {
            type: 'string',
            nullable: true
        },
        EnglishName: {
            type: 'string',
            nullable: true
        },
        DisplayName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LogEntry = {
    type: 'object',
    properties: {
        When: {
            type: 'string',
            format: 'date-time'
        },
        ID: {
            type: 'integer',
            format: 'int64'
        },
        Message: {
            type: 'string',
            nullable: true
        },
        Tag: {
            type: 'string',
            nullable: true
        },
        MessageID: {
            type: 'string',
            nullable: true
        },
        ExceptionID: {
            type: 'string',
            nullable: true
        },
        Type: {
            '$ref': '#/components/schemas/LogMessageType'
        },
        Exception: {
            '$ref': '#/components/schemas/Exception'
        },
        BackupID: {
            type: 'string',
            nullable: true
        },
        TaskID: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $LogMessageType = {
    enum: ['ExplicitOnly', 'Profiling', 'Verbose', 'Retry', 'Information', 'DryRun', 'Warning', 'Error'],
    type: 'string'
} as const;

export const $LoginInputDto = {
    type: 'object',
    properties: {
        Password: {
            type: 'string',
            nullable: true
        },
        RememberMe: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $MemberInfo = {
    type: 'object',
    properties: {
        MemberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DeclaringType: {
            '$ref': '#/components/schemas/Type'
        },
        ReflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        Module: {
            '$ref': '#/components/schemas/Module'
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        IsCollectible: {
            type: 'boolean',
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $MemberTypes = {
    enum: ['Constructor', 'Event', 'Field', 'Method', 'Property', 'TypeInfo', 'Custom', 'NestedType', 'All'],
    type: 'string'
} as const;

export const $MethodAttributes = {
    enum: ['PrivateScope', 'Private', 'FamANDAssem', 'Assembly', 'Family', 'FamORAssem', 'Public', 'MemberAccessMask', 'UnmanagedExport', 'Static', 'Final', 'Virtual', 'HideBySig', 'NewSlot', 'CheckAccessOnOverride', 'Abstract', 'SpecialName', 'RTSpecialName', 'PinvokeImpl', 'HasSecurity', 'RequireSecObject', 'ReservedMask'],
    type: 'string'
} as const;

export const $MethodBase = {
    type: 'object',
    properties: {
        MemberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DeclaringType: {
            '$ref': '#/components/schemas/Type'
        },
        ReflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        Module: {
            '$ref': '#/components/schemas/Module'
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        IsCollectible: {
            type: 'boolean',
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        Attributes: {
            '$ref': '#/components/schemas/MethodAttributes'
        },
        MethodImplementationFlags: {
            '$ref': '#/components/schemas/MethodImplAttributes'
        },
        CallingConvention: {
            '$ref': '#/components/schemas/CallingConventions'
        },
        IsAbstract: {
            type: 'boolean',
            readOnly: true
        },
        IsConstructor: {
            type: 'boolean',
            readOnly: true
        },
        IsFinal: {
            type: 'boolean',
            readOnly: true
        },
        IsHideBySig: {
            type: 'boolean',
            readOnly: true
        },
        IsSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        IsStatic: {
            type: 'boolean',
            readOnly: true
        },
        IsVirtual: {
            type: 'boolean',
            readOnly: true
        },
        IsAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsFamily: {
            type: 'boolean',
            readOnly: true
        },
        IsFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsPrivate: {
            type: 'boolean',
            readOnly: true
        },
        IsPublic: {
            type: 'boolean',
            readOnly: true
        },
        IsConstructedGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericMethodDefinition: {
            type: 'boolean',
            readOnly: true
        },
        ContainsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        MethodHandle: {
            '$ref': '#/components/schemas/RuntimeMethodHandle'
        },
        IsSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $MethodImplAttributes = {
    enum: ['IL', 'Native', 'OPTIL', 'CodeTypeMask', 'ManagedMask', 'NoInlining', 'ForwardRef', 'Synchronized', 'NoOptimization', 'PreserveSig', 'AggressiveInlining', 'AggressiveOptimization', 'InternalCall', 'MaxMethodImplVal'],
    type: 'string'
} as const;

export const $MethodInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DeclaringType: {
            '$ref': '#/components/schemas/Type'
        },
        ReflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        Module: {
            '$ref': '#/components/schemas/Module'
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        IsCollectible: {
            type: 'boolean',
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        Attributes: {
            '$ref': '#/components/schemas/MethodAttributes'
        },
        MethodImplementationFlags: {
            '$ref': '#/components/schemas/MethodImplAttributes'
        },
        CallingConvention: {
            '$ref': '#/components/schemas/CallingConventions'
        },
        IsAbstract: {
            type: 'boolean',
            readOnly: true
        },
        IsConstructor: {
            type: 'boolean',
            readOnly: true
        },
        IsFinal: {
            type: 'boolean',
            readOnly: true
        },
        IsHideBySig: {
            type: 'boolean',
            readOnly: true
        },
        IsSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        IsStatic: {
            type: 'boolean',
            readOnly: true
        },
        IsVirtual: {
            type: 'boolean',
            readOnly: true
        },
        IsAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsFamily: {
            type: 'boolean',
            readOnly: true
        },
        IsFamilyAndAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsFamilyOrAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsPrivate: {
            type: 'boolean',
            readOnly: true
        },
        IsPublic: {
            type: 'boolean',
            readOnly: true
        },
        IsConstructedGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericMethod: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericMethodDefinition: {
            type: 'boolean',
            readOnly: true
        },
        ContainsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        MethodHandle: {
            '$ref': '#/components/schemas/RuntimeMethodHandle'
        },
        IsSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        MemberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        ReturnParameter: {
            '$ref': '#/components/schemas/ParameterInfo'
        },
        ReturnType: {
            '$ref': '#/components/schemas/Type'
        },
        ReturnTypeCustomAttributes: {
            '$ref': '#/components/schemas/ICustomAttributeProvider'
        }
    },
    additionalProperties: false
} as const;

export const $Module = {
    type: 'object',
    properties: {
        Assembly: {
            '$ref': '#/components/schemas/Assembly'
        },
        FullyQualifiedName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        MDStreamVersion: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        ModuleVersionId: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        ScopeName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        ModuleHandle: {
            '$ref': '#/components/schemas/ModuleHandle'
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $ModuleHandle = {
    type: 'object',
    properties: {
        MDStreamVersion: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $NotificationDto = {
    type: 'object',
    properties: {
        ID: {
            type: 'integer',
            format: 'int64'
        },
        Type: {
            '$ref': '#/components/schemas/NotificationType'
        },
        Title: {
            type: 'string',
            nullable: true
        },
        Message: {
            type: 'string',
            nullable: true
        },
        Exception: {
            type: 'string',
            nullable: true
        },
        BackupID: {
            type: 'string',
            nullable: true
        },
        Action: {
            type: 'string',
            nullable: true
        },
        Timestamp: {
            type: 'string',
            format: 'date-time'
        },
        LogEntryID: {
            type: 'string',
            nullable: true
        },
        MessageID: {
            type: 'string',
            nullable: true
        },
        MessageLogTag: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $NotificationType = {
    enum: ['Information', 'Warning', 'Error'],
    type: 'string'
} as const;

export const $ParameterAttributes = {
    enum: ['None', 'In', 'Out', 'Lcid', 'Retval', 'Optional', 'HasDefault', 'HasFieldMarshal', 'Reserved3', 'Reserved4', 'ReservedMask'],
    type: 'string'
} as const;

export const $ParameterInfo = {
    type: 'object',
    properties: {
        Attributes: {
            '$ref': '#/components/schemas/ParameterAttributes'
        },
        Member: {
            '$ref': '#/components/schemas/MemberInfo'
        },
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        ParameterType: {
            '$ref': '#/components/schemas/Type'
        },
        Position: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        IsIn: {
            type: 'boolean',
            readOnly: true
        },
        IsLcid: {
            type: 'boolean',
            readOnly: true
        },
        IsOptional: {
            type: 'boolean',
            readOnly: true
        },
        IsOut: {
            type: 'boolean',
            readOnly: true
        },
        IsRetval: {
            type: 'boolean',
            readOnly: true
        },
        DefaultValue: {
            nullable: true,
            readOnly: true
        },
        RawDefaultValue: {
            nullable: true,
            readOnly: true
        },
        HasDefaultValue: {
            type: 'boolean',
            readOnly: true
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $PropertyAttributes = {
    enum: ['None', 'SpecialName', 'RTSpecialName', 'HasDefault', 'Reserved2', 'Reserved3', 'Reserved4', 'ReservedMask'],
    type: 'string'
} as const;

export const $PropertyInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DeclaringType: {
            '$ref': '#/components/schemas/Type'
        },
        ReflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        Module: {
            '$ref': '#/components/schemas/Module'
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        IsCollectible: {
            type: 'boolean',
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        MemberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        PropertyType: {
            '$ref': '#/components/schemas/Type'
        },
        Attributes: {
            '$ref': '#/components/schemas/PropertyAttributes'
        },
        IsSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        CanRead: {
            type: 'boolean',
            readOnly: true
        },
        CanWrite: {
            type: 'boolean',
            readOnly: true
        },
        GetMethod: {
            '$ref': '#/components/schemas/MethodInfo'
        },
        SetMethod: {
            '$ref': '#/components/schemas/MethodInfo'
        }
    },
    additionalProperties: false
} as const;

export const $RemoteControlStatusOutput = {
    type: 'object',
    properties: {
        CanEnable: {
            type: 'boolean'
        },
        IsEnabled: {
            type: 'boolean'
        },
        IsConnected: {
            type: 'boolean'
        },
        IsRegistering: {
            type: 'boolean'
        },
        IsRegisteringFaulted: {
            type: 'boolean'
        },
        IsRegisteringCompleted: {
            type: 'boolean'
        },
        RegistrationUrl: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RemoteOperationInput = {
    type: 'object',
    properties: {
        path: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RepairInputDto = {
    type: 'object',
    properties: {
        only_paths: {
            type: 'boolean',
            nullable: true
        },
        time: {
            type: 'string',
            nullable: true
        },
        version: {
            type: 'string',
            nullable: true
        },
        paths: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RestoreInputDto = {
    type: 'object',
    properties: {
        paths: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        passphrase: {
            type: 'string',
            nullable: true
        },
        time: {
            type: 'string',
            nullable: true
        },
        restore_path: {
            type: 'string',
            nullable: true
        },
        overwrite: {
            type: 'boolean',
            nullable: true
        },
        permissions: {
            type: 'boolean',
            nullable: true
        },
        skip_metadata: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RuntimeFieldHandle = {
    type: 'object',
    properties: {
        Value: {
            '$ref': '#/components/schemas/IntPtr'
        }
    },
    additionalProperties: false
} as const;

export const $RuntimeMethodHandle = {
    type: 'object',
    properties: {
        Value: {
            '$ref': '#/components/schemas/IntPtr'
        }
    },
    additionalProperties: false
} as const;

export const $RuntimeTypeHandle = {
    type: 'object',
    properties: {
        Value: {
            '$ref': '#/components/schemas/IntPtr'
        }
    },
    additionalProperties: false
} as const;

export const $ScheduleDto = {
    type: 'object',
    properties: {
        ID: {
            type: 'integer',
            format: 'int64'
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Time: {
            type: 'string',
            format: 'date-time'
        },
        Repeat: {
            type: 'string',
            nullable: true
        },
        LastRun: {
            type: 'string',
            format: 'date-time'
        },
        Rule: {
            type: 'string',
            nullable: true
        },
        AllowedDays: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DayOfWeek'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ScheduleInputDto = {
    type: 'object',
    properties: {
        ID: {
            type: 'integer',
            format: 'int64'
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Time: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        Repeat: {
            type: 'string',
            nullable: true
        },
        LastRun: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        Rule: {
            type: 'string',
            nullable: true
        },
        AllowedDays: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DayOfWeek'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $SecurityRuleSet = {
    enum: ['None', 'Level1', 'Level2'],
    type: 'string'
} as const;

export const $ServerStatusDto = {
    type: 'object',
    properties: {
        ActiveTask: {
            '$ref': '#/components/schemas/Int64StringTuple'
        },
        ProgramState: {
            '$ref': '#/components/schemas/LiveControlState'
        },
        SchedulerQueueIds: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Int64StringTuple'
            },
            nullable: true
        },
        ProposedSchedule: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringDateTimeTuple'
            },
            nullable: true
        },
        HasWarning: {
            type: 'boolean'
        },
        HasError: {
            type: 'boolean'
        },
        SuggestedStatusIcon: {
            '$ref': '#/components/schemas/SuggestedStatusIcon'
        },
        EstimatedPauseEnd: {
            type: 'string',
            format: 'date-time'
        },
        LastEventID: {
            type: 'integer',
            format: 'int64'
        },
        LastDataUpdateID: {
            type: 'integer',
            format: 'int64'
        },
        LastNotificationUpdateID: {
            type: 'integer',
            format: 'int64'
        },
        UpdatedVersion: {
            type: 'string',
            nullable: true
        },
        UpdaterState: {
            '$ref': '#/components/schemas/UpdatePollerStates'
        },
        UpdateDownloadLink: {
            type: 'string',
            nullable: true
        },
        UpdateDownloadProgress: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const $SettingDto = {
    type: 'object',
    properties: {
        Filter: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Value: {
            type: 'string',
            nullable: true
        },
        Argument: {
            '$ref': '#/components/schemas/ICommandLineArgument'
        }
    },
    additionalProperties: false
} as const;

export const $SettingInputDto = {
    type: 'object',
    properties: {
        Filter: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $SigninInputDto = {
    type: 'object',
    properties: {
        SigninToken: {
            type: 'string',
            nullable: true
        },
        RememberMe: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $SigninTokenOutputDto = {
    type: 'object',
    properties: {
        Token: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $SingleOperationTokenOutputDto = {
    type: 'object',
    properties: {
        Token: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $SolveCaptchaInputDto = {
    type: 'object',
    properties: {
        target: {
            type: 'string',
            nullable: true
        },
        answer: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $SpecialFolderDto = {
    type: 'object',
    properties: {
        ID: {
            type: 'string',
            nullable: true
        },
        Path: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $StartRegistrationInput = {
    type: 'object',
    properties: {
        RegistrationUrl: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $StringDateTimeTuple = {
    type: 'object',
    properties: {
        Item1: {
            type: 'string',
            nullable: true
        },
        Item2: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const $StructLayoutAttribute = {
    type: 'object',
    properties: {
        TypeId: {
            nullable: true,
            readOnly: true
        },
        Value: {
            '$ref': '#/components/schemas/LayoutKind'
        }
    },
    additionalProperties: false
} as const;

export const $SuggestedStatusIcon = {
    enum: ['Ready', 'ReadyWarning', 'ReadyError', 'Paused', 'Active', 'ActivePaused'],
    type: 'string'
} as const;

export const $SystemInfoDto = {
    type: 'object',
    properties: {
        APIVersion: {
            type: 'integer',
            format: 'int32'
        },
        PasswordPlaceholder: {
            type: 'string',
            nullable: true
        },
        ServerVersion: {
            type: 'string',
            nullable: true
        },
        ServerVersionName: {
            type: 'string',
            nullable: true
        },
        ServerVersionType: {
            type: 'string',
            nullable: true
        },
        RemoteControlRegistrationUrl: {
            type: 'string',
            nullable: true
        },
        StartedBy: {
            type: 'string',
            nullable: true
        },
        DefaultUpdateChannel: {
            type: 'string',
            nullable: true
        },
        DefaultUsageReportLevel: {
            type: 'string',
            nullable: true
        },
        ServerTime: {
            type: 'string',
            format: 'date-time'
        },
        OSType: {
            type: 'string',
            nullable: true
        },
        DirectorySeparator: {
            type: 'string'
        },
        PathSeparator: {
            type: 'string'
        },
        CaseSensitiveFilesystem: {
            type: 'boolean'
        },
        MachineName: {
            type: 'string',
            nullable: true
        },
        PackageTypeId: {
            type: 'string',
            nullable: true
        },
        UserName: {
            type: 'string',
            nullable: true
        },
        NewLine: {
            type: 'string',
            nullable: true
        },
        CLRVersion: {
            type: 'string',
            nullable: true
        },
        CLROSInfo: {
            '$ref': '#/components/schemas/CLROSInfoDto'
        },
        Options: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ICommandLineArgument'
            },
            nullable: true
        },
        CompressionModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        EncryptionModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        BackendModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        GenericModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        WebModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        ConnectionModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        ServerModules: {
            type: 'array',
            items: {},
            nullable: true
        },
        UsingAlternateUpdateURLs: {
            type: 'boolean'
        },
        LogLevels: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        SpecialFolders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SpecialFolderDto'
            },
            nullable: true
        },
        BrowserLocale: {
            '$ref': '#/components/schemas/LocaleDto'
        },
        SupportedLocales: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LocaleDto'
            },
            nullable: true
        },
        BrowserLocaleSupported: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $TaskStartedDto = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        ID: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $TreeNodeDto = {
    type: 'object',
    properties: {
        text: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            nullable: true
        },
        cls: {
            type: 'string',
            nullable: true
        },
        iconCls: {
            type: 'string',
            nullable: true
        },
        check: {
            type: 'boolean'
        },
        leaf: {
            type: 'boolean'
        },
        resolvedpath: {
            type: 'string',
            nullable: true
        },
        hidden: {
            type: 'boolean'
        },
        systemFile: {
            type: 'boolean'
        },
        temporary: {
            type: 'boolean'
        },
        symlink: {
            type: 'boolean'
        },
        fileSize: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const $Type = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        IsCollectible: {
            type: 'boolean',
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        IsInterface: {
            type: 'boolean',
            readOnly: true
        },
        MemberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        Namespace: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        AssemblyQualifiedName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        FullName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Assembly: {
            '$ref': '#/components/schemas/Assembly'
        },
        Module: {
            '$ref': '#/components/schemas/Module'
        },
        IsNested: {
            type: 'boolean',
            readOnly: true
        },
        DeclaringType: {
            '$ref': '#/components/schemas/Type'
        },
        DeclaringMethod: {
            '$ref': '#/components/schemas/MethodBase'
        },
        ReflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        UnderlyingSystemType: {
            '$ref': '#/components/schemas/Type'
        },
        IsTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        IsArray: {
            type: 'boolean',
            readOnly: true
        },
        IsByRef: {
            type: 'boolean',
            readOnly: true
        },
        IsPointer: {
            type: 'boolean',
            readOnly: true
        },
        IsConstructedGenericType: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericParameter: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericTypeParameter: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericMethodParameter: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericType: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        IsSZArray: {
            type: 'boolean',
            readOnly: true
        },
        IsVariableBoundArray: {
            type: 'boolean',
            readOnly: true
        },
        IsByRefLike: {
            type: 'boolean',
            readOnly: true
        },
        IsFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        IsUnmanagedFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        HasElementType: {
            type: 'boolean',
            readOnly: true
        },
        GenericTypeArguments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Type'
            },
            nullable: true,
            readOnly: true
        },
        GenericParameterPosition: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        GenericParameterAttributes: {
            '$ref': '#/components/schemas/GenericParameterAttributes'
        },
        Attributes: {
            '$ref': '#/components/schemas/TypeAttributes'
        },
        IsAbstract: {
            type: 'boolean',
            readOnly: true
        },
        IsImport: {
            type: 'boolean',
            readOnly: true
        },
        IsSealed: {
            type: 'boolean',
            readOnly: true
        },
        IsSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        IsClass: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedFamANDAssem: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedFamily: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedFamORAssem: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedPrivate: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedPublic: {
            type: 'boolean',
            readOnly: true
        },
        IsNotPublic: {
            type: 'boolean',
            readOnly: true
        },
        IsPublic: {
            type: 'boolean',
            readOnly: true
        },
        IsAutoLayout: {
            type: 'boolean',
            readOnly: true
        },
        IsExplicitLayout: {
            type: 'boolean',
            readOnly: true
        },
        IsLayoutSequential: {
            type: 'boolean',
            readOnly: true
        },
        IsAnsiClass: {
            type: 'boolean',
            readOnly: true
        },
        IsAutoClass: {
            type: 'boolean',
            readOnly: true
        },
        IsUnicodeClass: {
            type: 'boolean',
            readOnly: true
        },
        IsCOMObject: {
            type: 'boolean',
            readOnly: true
        },
        IsContextful: {
            type: 'boolean',
            readOnly: true
        },
        IsEnum: {
            type: 'boolean',
            readOnly: true
        },
        IsMarshalByRef: {
            type: 'boolean',
            readOnly: true
        },
        IsPrimitive: {
            type: 'boolean',
            readOnly: true
        },
        IsValueType: {
            type: 'boolean',
            readOnly: true
        },
        IsSignatureType: {
            type: 'boolean',
            readOnly: true
        },
        IsSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        StructLayoutAttribute: {
            '$ref': '#/components/schemas/StructLayoutAttribute'
        },
        TypeInitializer: {
            '$ref': '#/components/schemas/ConstructorInfo'
        },
        TypeHandle: {
            '$ref': '#/components/schemas/RuntimeTypeHandle'
        },
        GUID: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        BaseType: {
            '$ref': '#/components/schemas/Type'
        },
        IsSerializable: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        ContainsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        IsVisible: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $TypeAttributes = {
    enum: ['NotPublic', 'Public', 'NestedPublic', 'NestedPrivate', 'NestedFamily', 'NestedAssembly', 'NestedFamANDAssem', 'VisibilityMask', 'SequentialLayout', 'ExplicitLayout', 'LayoutMask', 'Interface', 'Abstract', 'Sealed', 'SpecialName', 'RTSpecialName', 'Import', 'Serializable', 'WindowsRuntime', 'UnicodeClass', 'AutoClass', 'StringFormatMask', 'HasSecurity', 'ReservedMask', 'BeforeFieldInit', 'CustomFormatMask'],
    type: 'string'
} as const;

export const $TypeInfo = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        CustomAttributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomAttributeData'
            },
            nullable: true,
            readOnly: true
        },
        IsCollectible: {
            type: 'boolean',
            readOnly: true
        },
        MetadataToken: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        IsInterface: {
            type: 'boolean',
            readOnly: true
        },
        MemberType: {
            '$ref': '#/components/schemas/MemberTypes'
        },
        Namespace: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        AssemblyQualifiedName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        FullName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Assembly: {
            '$ref': '#/components/schemas/Assembly'
        },
        Module: {
            '$ref': '#/components/schemas/Module'
        },
        IsNested: {
            type: 'boolean',
            readOnly: true
        },
        DeclaringType: {
            '$ref': '#/components/schemas/Type'
        },
        DeclaringMethod: {
            '$ref': '#/components/schemas/MethodBase'
        },
        ReflectedType: {
            '$ref': '#/components/schemas/Type'
        },
        UnderlyingSystemType: {
            '$ref': '#/components/schemas/Type'
        },
        IsTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        IsArray: {
            type: 'boolean',
            readOnly: true
        },
        IsByRef: {
            type: 'boolean',
            readOnly: true
        },
        IsPointer: {
            type: 'boolean',
            readOnly: true
        },
        IsConstructedGenericType: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericParameter: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericTypeParameter: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericMethodParameter: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericType: {
            type: 'boolean',
            readOnly: true
        },
        IsGenericTypeDefinition: {
            type: 'boolean',
            readOnly: true
        },
        IsSZArray: {
            type: 'boolean',
            readOnly: true
        },
        IsVariableBoundArray: {
            type: 'boolean',
            readOnly: true
        },
        IsByRefLike: {
            type: 'boolean',
            readOnly: true
        },
        IsFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        IsUnmanagedFunctionPointer: {
            type: 'boolean',
            readOnly: true
        },
        HasElementType: {
            type: 'boolean',
            readOnly: true
        },
        GenericTypeArguments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Type'
            },
            nullable: true,
            readOnly: true
        },
        GenericParameterPosition: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        GenericParameterAttributes: {
            '$ref': '#/components/schemas/GenericParameterAttributes'
        },
        Attributes: {
            '$ref': '#/components/schemas/TypeAttributes'
        },
        IsAbstract: {
            type: 'boolean',
            readOnly: true
        },
        IsImport: {
            type: 'boolean',
            readOnly: true
        },
        IsSealed: {
            type: 'boolean',
            readOnly: true
        },
        IsSpecialName: {
            type: 'boolean',
            readOnly: true
        },
        IsClass: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedAssembly: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedFamANDAssem: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedFamily: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedFamORAssem: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedPrivate: {
            type: 'boolean',
            readOnly: true
        },
        IsNestedPublic: {
            type: 'boolean',
            readOnly: true
        },
        IsNotPublic: {
            type: 'boolean',
            readOnly: true
        },
        IsPublic: {
            type: 'boolean',
            readOnly: true
        },
        IsAutoLayout: {
            type: 'boolean',
            readOnly: true
        },
        IsExplicitLayout: {
            type: 'boolean',
            readOnly: true
        },
        IsLayoutSequential: {
            type: 'boolean',
            readOnly: true
        },
        IsAnsiClass: {
            type: 'boolean',
            readOnly: true
        },
        IsAutoClass: {
            type: 'boolean',
            readOnly: true
        },
        IsUnicodeClass: {
            type: 'boolean',
            readOnly: true
        },
        IsCOMObject: {
            type: 'boolean',
            readOnly: true
        },
        IsContextful: {
            type: 'boolean',
            readOnly: true
        },
        IsEnum: {
            type: 'boolean',
            readOnly: true
        },
        IsMarshalByRef: {
            type: 'boolean',
            readOnly: true
        },
        IsPrimitive: {
            type: 'boolean',
            readOnly: true
        },
        IsValueType: {
            type: 'boolean',
            readOnly: true
        },
        IsSignatureType: {
            type: 'boolean',
            readOnly: true
        },
        IsSecurityCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecuritySafeCritical: {
            type: 'boolean',
            readOnly: true
        },
        IsSecurityTransparent: {
            type: 'boolean',
            readOnly: true
        },
        StructLayoutAttribute: {
            '$ref': '#/components/schemas/StructLayoutAttribute'
        },
        TypeInitializer: {
            '$ref': '#/components/schemas/ConstructorInfo'
        },
        TypeHandle: {
            '$ref': '#/components/schemas/RuntimeTypeHandle'
        },
        GUID: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        BaseType: {
            '$ref': '#/components/schemas/Type'
        },
        IsSerializable: {
            type: 'boolean',
            readOnly: true,
            deprecated: true
        },
        ContainsGenericParameters: {
            type: 'boolean',
            readOnly: true
        },
        IsVisible: {
            type: 'boolean',
            readOnly: true
        },
        GenericTypeParameters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Type'
            },
            nullable: true,
            readOnly: true
        },
        DeclaredConstructors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ConstructorInfo'
            },
            nullable: true,
            readOnly: true
        },
        DeclaredEvents: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EventInfo'
            },
            nullable: true,
            readOnly: true
        },
        DeclaredFields: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FieldInfo'
            },
            nullable: true,
            readOnly: true
        },
        DeclaredMembers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MemberInfo'
            },
            nullable: true,
            readOnly: true
        },
        DeclaredMethods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MethodInfo'
            },
            nullable: true,
            readOnly: true
        },
        DeclaredNestedTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TypeInfo'
            },
            nullable: true,
            readOnly: true
        },
        DeclaredProperties: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PropertyInfo'
            },
            nullable: true,
            readOnly: true
        },
        ImplementedInterfaces: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Type'
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $UpdateDbPathInputDto = {
    type: 'object',
    properties: {
        path: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UpdatePollerStates = {
    enum: ['Waiting', 'Checking', 'Downloading'],
    type: 'string'
} as const;

export const $WebModuleOutputDto = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        Result: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;