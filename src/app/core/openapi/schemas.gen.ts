// This file is auto-generated by @hey-api/openapi-ts

export const AccessTokenOutputSchema = {
    type: 'object',
    properties: {
        AccessToken: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const AcknowlegdementDtoSchema = {
    type: 'object',
    properties: {
        Acknowledgements: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ArgumentTypeSchema = {
    enum: ['String', 'Integer', 'Boolean', 'Timespan', 'Size', 'Enumeration', 'Path', 'Password', 'Flags', 'Decimal', 'Unknown'],
    type: 'string'
} as const;

export const BackupAndScheduleInputDtoSchema = {
    type: 'object',
    properties: {
        Backup: {
            '$ref': '#/components/schemas/BackupInputDto'
        },
        Schedule: {
            '$ref': '#/components/schemas/ScheduleInputDto'
        }
    },
    additionalProperties: false
} as const;

export const BackupAndScheduleOutputDtoSchema = {
    type: 'object',
    properties: {
        Backup: {
            '$ref': '#/components/schemas/BackupDto'
        },
        Schedule: {
            '$ref': '#/components/schemas/ScheduleDto'
        }
    },
    additionalProperties: false
} as const;

export const BackupDtoSchema = {
    type: 'object',
    properties: {
        ID: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Description: {
            type: 'string',
            nullable: true
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        TargetURL: {
            type: 'string',
            nullable: true
        },
        DBPath: {
            type: 'string',
            nullable: true
        },
        Sources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Settings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SettingDto'
            },
            nullable: true
        },
        Filters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FilterDto'
            },
            nullable: true
        },
        Metadata: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        IsTemporary: {
            type: 'boolean'
        },
        IsUnencryptedOrPassphraseStored: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const BackupInputDtoSchema = {
    type: 'object',
    properties: {
        Name: {
            type: 'string',
            nullable: true
        },
        Description: {
            type: 'string',
            nullable: true
        },
        DBPath: {
            type: 'string',
            nullable: true
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        TargetURL: {
            type: 'string',
            nullable: true
        },
        Sources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Settings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SettingInputDto'
            },
            nullable: true
        },
        Filters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FilterInputDto'
            },
            nullable: true
        },
        Metadata: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Boolean__f__AnonymousType1Schema = {
    type: 'object',
    properties: {
        success: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const ChangelogDtoSchema = {
    type: 'object',
    properties: {
        Version: {
            type: 'string',
            nullable: true
        },
        Changelog: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CommandLineLogOutputDtoSchema = {
    type: 'object',
    properties: {
        Pagesize: {
            type: 'integer',
            format: 'int32'
        },
        Offset: {
            type: 'integer',
            format: 'int32'
        },
        Count: {
            type: 'integer',
            format: 'int32'
        },
        Items: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Finished: {
            type: 'boolean'
        },
        Started: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const CommandlineTaskStartedDtoSchema = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        ID: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const CreateBackupDtoSchema = {
    type: 'object',
    properties: {
        ID: {
            type: 'string',
            nullable: true
        },
        Temporary: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const DayOfWeekSchema = {
    enum: [
        null,
        null,
        null,
        null,
        null,
        null,
        null
    ],
    type: 'string'
} as const;

export const DeleteBackupOutputDtoSchema = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        Reason: {
            type: 'string',
            nullable: true
        },
        ID: {
            type: 'integer',
            format: 'int64',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const DuplicatiOperationSchema = {
    enum: ['Backup', 'Restore', 'List', 'Remove', 'Repair', 'RepairUpdate', 'Verify', 'Compact', 'CreateReport', 'ListRemote', 'Delete', 'Vacuum', 'CustomRunner'],
    type: 'string'
} as const;

export const ExportArgsOnlyDtoSchema = {
    type: 'object',
    properties: {
        Backend: {
            type: 'string',
            nullable: true
        },
        Arguments: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Options: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ExportCommandlineDtoSchema = {
    type: 'object',
    properties: {
        Command: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FilesystemInputSchema = {
    type: 'object',
    properties: {
        path: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FilterDtoSchema = {
    type: 'object',
    properties: {
        Order: {
            type: 'integer',
            format: 'int64'
        },
        Include: {
            type: 'boolean'
        },
        Expression: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const FilterInputDtoSchema = {
    type: 'object',
    properties: {
        Order: {
            type: 'integer',
            format: 'int64'
        },
        Include: {
            type: 'boolean'
        },
        Expression: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GenerateCaptchaOutputSchema = {
    type: 'object',
    properties: {
        Token: {
            type: 'string',
            nullable: true
        },
        Answer: {
            type: 'string',
            nullable: true
        },
        NoVisualChallenge: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const GetBackupResultDtoSchema = {
    type: 'object',
    properties: {
        Schedule: {
            '$ref': '#/components/schemas/ScheduleDto'
        },
        Backup: {
            '$ref': '#/components/schemas/BackupDto'
        },
        DisplayNames: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetDbPathDtoSchema = {
    type: 'object',
    properties: {
        Exists: {
            type: 'boolean'
        },
        Path: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const GetTaskStateDtoSchema = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        ID: {
            type: 'integer',
            format: 'int64'
        },
        ErrorMessage: {
            type: 'string',
            nullable: true
        },
        Exception: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const IBackupSchema = {
    type: 'object',
    properties: {
        ID: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Description: {
            type: 'string',
            nullable: true
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        TargetURL: {
            type: 'string',
            nullable: true
        },
        DBPath: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Sources: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Settings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ISetting'
            },
            nullable: true
        },
        Filters: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IFilter'
            },
            nullable: true
        },
        Metadata: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        },
        IsTemporary: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const ICommandLineArgumentSchema = {
    type: 'object',
    properties: {
        Aliases: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        LongDescription: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        ShortDescription: {
            type: 'string',
            nullable: true
        },
        Type: {
            '$ref': '#/components/schemas/ArgumentType'
        },
        ValidValues: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        DefaultValue: {
            type: 'string',
            nullable: true
        },
        Typename: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Deprecated: {
            type: 'boolean'
        },
        DeprecationMessage: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const IDynamicModuleSchema = {
    type: 'object',
    properties: {
        Key: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Description: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DisplayName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Options: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ICommandLineArgument'
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const IFilterSchema = {
    type: 'object',
    properties: {
        Order: {
            type: 'integer',
            format: 'int64'
        },
        Include: {
            type: 'boolean'
        },
        Expression: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const IListResultFilesetSchema = {
    type: 'object',
    properties: {
        Version: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        IsFullBackup: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        Time: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        FileCount: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        FileSizes: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const IProgressEventDataSchema = {
    type: 'object',
    properties: {
        BackupID: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        TaskID: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        BackendAction: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        BackendPath: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        BackendFileSize: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        BackendFileProgress: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        BackendSpeed: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        BackendIsBlocking: {
            type: 'boolean',
            readOnly: true
        },
        CurrentFilename: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        CurrentFilesize: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        CurrentFileoffset: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        CurrentFilecomplete: {
            type: 'boolean',
            readOnly: true
        },
        Phase: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        OverallProgress: {
            type: 'number',
            format: 'float',
            readOnly: true
        },
        ProcessedFileCount: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        ProcessedFileSize: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        TotalFileCount: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        TotalFileSize: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        StillCounting: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const IRunnerDataSchema = {
    type: 'object',
    properties: {
        Backup: {
            '$ref': '#/components/schemas/IBackup'
        },
        ExtraOptions: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true,
            readOnly: true
        },
        FilterStrings: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            readOnly: true
        },
        TaskID: {
            type: 'integer',
            format: 'int64',
            readOnly: true
        },
        BackupID: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Operation: {
            '$ref': '#/components/schemas/DuplicatiOperation'
        }
    },
    additionalProperties: false
} as const;

export const ISettingSchema = {
    type: 'object',
    properties: {
        Filter: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Value: {
            type: 'string',
            nullable: true
        },
        Argument: {
            '$ref': '#/components/schemas/ICommandLineArgument'
        }
    },
    additionalProperties: false
} as const;

export const IWebModuleSchema = {
    type: 'object',
    properties: {
        Key: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        DisplayName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        Description: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        SupportedCommands: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ICommandLineArgument'
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const ImportBackupInputDtoSchema = {
    type: 'object',
    properties: {
        config: {
            type: 'string',
            nullable: true
        },
        cmdline: {
            type: 'boolean',
            nullable: true
        },
        import_metadata: {
            type: 'boolean',
            nullable: true
        },
        direct: {
            type: 'boolean',
            nullable: true
        },
        passphrase: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ImportBackupOutputDtoSchema = {
    type: 'object',
    properties: {
        Id: {
            type: 'string',
            nullable: true
        },
        data: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const Int64StringTupleSchema = {
    type: 'object',
    properties: {
        Item1: {
            type: 'integer',
            format: 'int64'
        },
        Item2: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const IsBackupActiveDtoSchema = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        Active: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const IsDbUsedElsewhereDtoSchema = {
    type: 'object',
    properties: {
        inuse: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const IssueSigninTokenInputDtoSchema = {
    type: 'object',
    properties: {
        Password: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LicenseDtoSchema = {
    type: 'object',
    properties: {
        Title: {
            type: 'string',
            nullable: true
        },
        Url: {
            type: 'string',
            nullable: true
        },
        License: {
            type: 'string',
            nullable: true
        },
        Jsondata: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LiveControlStateSchema = {
    enum: ['Running', 'Paused'],
    type: 'string'
} as const;

export const LocaleDtoSchema = {
    type: 'object',
    properties: {
        Code: {
            type: 'string',
            nullable: true
        },
        EnglishName: {
            type: 'string',
            nullable: true
        },
        DisplayName: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LogEntrySchema = {
    type: 'object',
    properties: {
        When: {
            type: 'string',
            format: 'date-time'
        },
        ID: {
            type: 'integer',
            format: 'int64'
        },
        Message: {
            type: 'string',
            nullable: true
        },
        Tag: {
            type: 'string',
            nullable: true
        },
        MessageID: {
            type: 'string',
            nullable: true
        },
        ExceptionID: {
            type: 'string',
            nullable: true
        },
        Type: {
            '$ref': '#/components/schemas/LogMessageType'
        },
        Exception: {
            type: 'string',
            nullable: true
        },
        BackupID: {
            type: 'string',
            nullable: true
        },
        TaskID: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const LogMessageTypeSchema = {
    enum: ['ExplicitOnly', 'Profiling', 'Verbose', 'Retry', 'Information', 'DryRun', 'Warning', 'Error'],
    type: 'string'
} as const;

export const LoginInputDtoSchema = {
    type: 'object',
    properties: {
        Password: {
            type: 'string',
            nullable: true
        },
        RememberMe: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const NotificationDtoSchema = {
    type: 'object',
    properties: {
        ID: {
            type: 'integer',
            format: 'int64'
        },
        Type: {
            '$ref': '#/components/schemas/NotificationType'
        },
        Title: {
            type: 'string',
            nullable: true
        },
        Message: {
            type: 'string',
            nullable: true
        },
        Exception: {
            type: 'string',
            nullable: true
        },
        BackupID: {
            type: 'string',
            nullable: true
        },
        Action: {
            type: 'string',
            nullable: true
        },
        Timestamp: {
            type: 'string',
            format: 'date-time'
        },
        LogEntryID: {
            type: 'string',
            nullable: true
        },
        MessageID: {
            type: 'string',
            nullable: true
        },
        MessageLogTag: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const NotificationTypeSchema = {
    enum: ['Information', 'Warning', 'Error'],
    type: 'string'
} as const;

export const RemoteControlStatusOutputSchema = {
    type: 'object',
    properties: {
        CanEnable: {
            type: 'boolean'
        },
        IsEnabled: {
            type: 'boolean'
        },
        IsConnected: {
            type: 'boolean'
        },
        IsRegistering: {
            type: 'boolean'
        },
        IsRegisteringFaulted: {
            type: 'boolean'
        },
        IsRegisteringCompleted: {
            type: 'boolean'
        },
        RegistrationUrl: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RemoteOperationInputSchema = {
    type: 'object',
    properties: {
        path: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RepairInputDtoSchema = {
    type: 'object',
    properties: {
        only_paths: {
            type: 'boolean',
            nullable: true
        },
        time: {
            type: 'string',
            nullable: true
        },
        version: {
            type: 'string',
            nullable: true
        },
        paths: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const RestoreInputDtoSchema = {
    type: 'object',
    properties: {
        paths: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        passphrase: {
            type: 'string',
            nullable: true
        },
        time: {
            type: 'string',
            nullable: true
        },
        restore_path: {
            type: 'string',
            nullable: true
        },
        overwrite: {
            type: 'boolean',
            nullable: true
        },
        permissions: {
            type: 'boolean',
            nullable: true
        },
        skip_metadata: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ScheduleDtoSchema = {
    type: 'object',
    properties: {
        ID: {
            type: 'integer',
            format: 'int64'
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Time: {
            type: 'string',
            format: 'date-time'
        },
        Repeat: {
            type: 'string',
            nullable: true
        },
        LastRun: {
            type: 'string',
            format: 'date-time'
        },
        Rule: {
            type: 'string',
            nullable: true
        },
        AllowedDays: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DayOfWeek'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ScheduleInputDtoSchema = {
    type: 'object',
    properties: {
        ID: {
            type: 'integer',
            format: 'int64'
        },
        Tags: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        Time: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        Repeat: {
            type: 'string',
            nullable: true
        },
        LastRun: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        Rule: {
            type: 'string',
            nullable: true
        },
        AllowedDays: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DayOfWeek'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const ServerStatusDtoSchema = {
    type: 'object',
    properties: {
        ActiveTask: {
            '$ref': '#/components/schemas/Int64StringTuple'
        },
        ProgramState: {
            '$ref': '#/components/schemas/LiveControlState'
        },
        SchedulerQueueIds: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Int64StringTuple'
            },
            nullable: true
        },
        ProposedSchedule: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/StringDateTimeTuple'
            },
            nullable: true
        },
        HasWarning: {
            type: 'boolean'
        },
        HasError: {
            type: 'boolean'
        },
        SuggestedStatusIcon: {
            '$ref': '#/components/schemas/SuggestedStatusIcon'
        },
        EstimatedPauseEnd: {
            type: 'string',
            format: 'date-time'
        },
        LastEventID: {
            type: 'integer',
            format: 'int64'
        },
        LastDataUpdateID: {
            type: 'integer',
            format: 'int64'
        },
        LastNotificationUpdateID: {
            type: 'integer',
            format: 'int64'
        },
        UpdatedVersion: {
            type: 'string',
            nullable: true
        },
        UpdaterState: {
            '$ref': '#/components/schemas/UpdatePollerStates'
        },
        UpdateDownloadLink: {
            type: 'string',
            nullable: true
        },
        UpdateDownloadProgress: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const SettingDtoSchema = {
    type: 'object',
    properties: {
        Filter: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Value: {
            type: 'string',
            nullable: true
        },
        Argument: {
            '$ref': '#/components/schemas/ICommandLineArgument'
        }
    },
    additionalProperties: false
} as const;

export const SettingInputDtoSchema = {
    type: 'object',
    properties: {
        Filter: {
            type: 'string',
            nullable: true
        },
        Name: {
            type: 'string',
            nullable: true
        },
        Value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SigninInputDtoSchema = {
    type: 'object',
    properties: {
        SigninToken: {
            type: 'string',
            nullable: true
        },
        RememberMe: {
            type: 'boolean',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SigninTokenOutputDtoSchema = {
    type: 'object',
    properties: {
        Token: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SingleOperationTokenOutputDtoSchema = {
    type: 'object',
    properties: {
        Token: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SolveCaptchaInputDtoSchema = {
    type: 'object',
    properties: {
        target: {
            type: 'string',
            nullable: true
        },
        answer: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const SpecialFolderDtoSchema = {
    type: 'object',
    properties: {
        ID: {
            type: 'string',
            nullable: true
        },
        Path: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const StartRegistrationInputSchema = {
    type: 'object',
    properties: {
        RegistrationUrl: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const StringDateTimeTupleSchema = {
    type: 'object',
    properties: {
        Item1: {
            type: 'string',
            nullable: true
        },
        Item2: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const SuggestedStatusIconSchema = {
    enum: ['Ready', 'ReadyWarning', 'ReadyError', 'Paused', 'Active', 'ActivePaused'],
    type: 'string'
} as const;

export const SystemInfoDtoSchema = {
    type: 'object',
    properties: {
        APIVersion: {
            type: 'integer',
            format: 'int32'
        },
        PasswordPlaceholder: {
            type: 'string',
            nullable: true
        },
        ServerVersion: {
            type: 'string',
            nullable: true
        },
        ServerVersionName: {
            type: 'string',
            nullable: true
        },
        ServerVersionType: {
            type: 'string',
            nullable: true
        },
        RemoteControlRegistrationUrl: {
            type: 'string',
            nullable: true
        },
        StartedBy: {
            type: 'string',
            nullable: true
        },
        DefaultUpdateChannel: {
            type: 'string',
            nullable: true
        },
        DefaultUsageReportLevel: {
            type: 'string',
            nullable: true
        },
        ServerTime: {
            type: 'string',
            format: 'date-time'
        },
        OSType: {
            type: 'string',
            nullable: true
        },
        OSVersion: {
            type: 'string',
            nullable: true
        },
        DirectorySeparator: {
            type: 'string'
        },
        PathSeparator: {
            type: 'string'
        },
        CaseSensitiveFilesystem: {
            type: 'boolean'
        },
        MachineName: {
            type: 'string',
            nullable: true
        },
        PackageTypeId: {
            type: 'string',
            nullable: true
        },
        UserName: {
            type: 'string',
            nullable: true
        },
        NewLine: {
            type: 'string',
            nullable: true
        },
        CLRVersion: {
            type: 'string',
            nullable: true
        },
        Options: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ICommandLineArgument'
            },
            nullable: true
        },
        CompressionModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        EncryptionModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        BackendModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        GenericModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        WebModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        ConnectionModules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IDynamicModule'
            },
            nullable: true
        },
        ServerModules: {
            type: 'array',
            items: {},
            nullable: true
        },
        UsingAlternateUpdateURLs: {
            type: 'boolean'
        },
        LogLevels: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        SpecialFolders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SpecialFolderDto'
            },
            nullable: true
        },
        BrowserLocale: {
            '$ref': '#/components/schemas/LocaleDto'
        },
        SupportedLocales: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LocaleDto'
            },
            nullable: true
        },
        BrowserLocaleSupported: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const TaskStartedDtoSchema = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        ID: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const TreeNodeDtoSchema = {
    type: 'object',
    properties: {
        text: {
            type: 'string',
            nullable: true
        },
        id: {
            type: 'string',
            nullable: true
        },
        cls: {
            type: 'string',
            nullable: true
        },
        iconCls: {
            type: 'string',
            nullable: true
        },
        check: {
            type: 'boolean'
        },
        leaf: {
            type: 'boolean'
        },
        resolvedpath: {
            type: 'string',
            nullable: true
        },
        hidden: {
            type: 'boolean'
        },
        systemFile: {
            type: 'boolean'
        },
        temporary: {
            type: 'boolean'
        },
        symlink: {
            type: 'boolean'
        },
        fileSize: {
            type: 'integer',
            format: 'int64'
        }
    },
    additionalProperties: false
} as const;

export const UpdateCertificateInputDtoSchema = {
    type: 'object',
    properties: {
        Certificate: {
            type: 'string',
            nullable: true
        },
        Password: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdateDbPathInputDtoSchema = {
    type: 'object',
    properties: {
        path: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const UpdatePollerStatesSchema = {
    enum: ['Waiting', 'Checking', 'Downloading'],
    type: 'string'
} as const;

export const WebModuleOutputDtoSchema = {
    type: 'object',
    properties: {
        Status: {
            type: 'string',
            nullable: true
        },
        Result: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;