// This file is auto-generated by @hey-api/openapi-ts

export type AccessTokenOutputDto = {
    AccessToken?: (string) | null;
};

export type AcknowlegdementDto = {
    Acknowledgements?: (string) | null;
};

export type ActiveTransfer = {
    BackendAction?: (string) | null;
    BackendPath?: (string) | null;
    BackendFileSize?: number;
    BackendFileProgress?: number;
    BackendSpeed?: number;
    BackendIsBlocking?: boolean;
};

export type ArgumentType = 'String' | 'Integer' | 'Boolean' | 'Timespan' | 'DateTime' | 'Size' | 'Enumeration' | 'Path' | 'Password' | 'Flags' | 'Decimal' | 'Unknown';

export type BackupAndScheduleInputDto = {
    Backup?: BackupInputDto;
    Schedule?: ScheduleInputDto;
};

export type BackupAndScheduleOutputDto = {
    Backup?: BackupDto;
    Schedule?: ScheduleDto;
};

export type BackupDto = {
    ID?: (string) | null;
    Name?: (string) | null;
    Description?: (string) | null;
    Tags?: Array<(string)> | null;
    TargetURL?: (string) | null;
    DBPath?: (string) | null;
    Sources?: Array<(string)> | null;
    Settings?: Array<SettingDto> | null;
    Filters?: Array<FilterDto> | null;
    Metadata?: {
        [key: string]: (string);
    } | null;
    IsTemporary?: boolean;
    IsUnencryptedOrPassphraseStored?: boolean;
};

export type BackupInputDto = {
    Name?: (string) | null;
    Description?: (string) | null;
    DBPath?: (string) | null;
    Tags?: Array<(string)> | null;
    TargetURL?: (string) | null;
    Sources?: Array<(string)> | null;
    Settings?: Array<SettingInputDto> | null;
    Filters?: Array<FilterInputDto> | null;
    Metadata?: {
        [key: string]: (string);
    } | null;
};

export type ChangelogDto = {
    Version?: (string) | null;
    Changelog?: (string) | null;
};

export type CommandLineLogOutputDto = {
    Pagesize?: number;
    Offset?: number;
    Count?: number;
    Items?: Array<(string)> | null;
    Finished?: boolean;
    Started?: boolean;
};

export type CommandlineTaskStartedDto = {
    Status?: (string) | null;
    ID?: (string) | null;
};

export type CrashLogOutputDto = {
    Logdata?: (string) | null;
};

export type CreateBackupDto = {
    ID?: (string) | null;
    Temporary?: boolean;
};

export type DayOfWeek = string;

export type DeleteBackupOutputDto = {
    Status?: (string) | null;
    Reason?: (string) | null;
    ID?: (number) | null;
};

export type DestinationTestRequestDto = {
    DestinationUrl?: (string) | null;
    Options?: {
        [key: string]: (string);
    } | null;
    AutoCreate?: boolean;
};

export type DestinationTestResponseDto = {
    Success?: boolean;
    Error?: (string) | null;
    StatusCode?: (string) | null;
    Data?: DestinationTestResult;
};

export type DestinationTestResult = {
    FolderExists?: (boolean) | null;
    FolderIsEmpty?: (boolean) | null;
    FolderContainsBackupFiles?: (boolean) | null;
    FolderContainsEncryptedBackupFiles?: (boolean) | null;
    AfterConnect?: (boolean) | null;
    HostCertificate?: (string) | null;
    ReportedHostKey?: (string) | null;
    AcceptedHostKey?: (string) | null;
};

export type ExportArgsOnlyDto = {
    Backend?: (string) | null;
    Arguments?: Array<(string)> | null;
    Options?: Array<(string)> | null;
};

export type ExportCommandlineDto = {
    Command?: (string) | null;
};

export type FilesystemInput = {
    path?: (string) | null;
};

export type FilterDto = {
    Order?: number;
    Include?: boolean;
    Expression?: (string) | null;
};

export type FilterGroupsDto = {
    FilterGroups?: {
        [key: string]: Array<(string)>;
    } | null;
};

export type FilterInputDto = {
    Order?: number;
    Include?: boolean;
    Expression?: (string) | null;
};

export type GetBackupResultDto = {
    Schedule?: ScheduleDto;
    Backup?: BackupDto;
    DisplayNames?: {
        [key: string]: (string);
    } | null;
};

export type GetDbPathDto = {
    Exists?: boolean;
    Path?: (string) | null;
};

export type GetTaskStateDto = {
    Status?: (string) | null;
    ID?: number;
    TaskStarted?: (string) | null;
    TaskFinished?: (string) | null;
    ErrorMessage?: (string) | null;
    Exception?: (string) | null;
};

export type ICommandLineArgument = {
    Aliases?: Array<(string)> | null;
    LongDescription?: (string) | null;
    Name?: (string) | null;
    ShortDescription?: (string) | null;
    Type?: ArgumentType;
    ValidValues?: Array<(string)> | null;
    DefaultValue?: (string) | null;
    readonly Typename?: (string) | null;
    Deprecated?: boolean;
    DeprecationMessage?: (string) | null;
};

export type IDynamicModule = {
    readonly Key?: (string) | null;
    readonly Description?: (string) | null;
    readonly DisplayName?: (string) | null;
    readonly Options?: Array<ICommandLineArgument> | null;
};

export type IListResultFileset = {
    readonly Version?: number;
    readonly IsFullBackup?: number;
    readonly Time?: string;
    readonly FileCount?: number;
    readonly FileSizes?: number;
};

export type ImportBackupInputDto = {
    config?: (string) | null;
    cmdline?: (boolean) | null;
    import_metadata?: (boolean) | null;
    direct?: (boolean) | null;
    passphrase?: (string) | null;
};

export type ImportBackupOutputDto = {
    Id?: (string) | null;
    data?: unknown;
};

export type Int64StringTuple = {
    Item1?: number;
    Item2?: (string) | null;
};

export type IProgressEventData = {
    readonly BackupID?: (string) | null;
    readonly TaskID?: number;
    readonly BackendAction?: (string) | null;
    readonly BackendPath?: (string) | null;
    readonly BackendFileSize?: number;
    readonly BackendFileProgress?: number;
    readonly BackendSpeed?: number;
    readonly BackendIsBlocking?: boolean;
    readonly CurrentFilename?: (string) | null;
    readonly CurrentFilesize?: number;
    readonly CurrentFileoffset?: number;
    readonly CurrentFilecomplete?: boolean;
    readonly Phase?: (string) | null;
    readonly OverallProgress?: number;
    readonly ProcessedFileCount?: number;
    readonly ProcessedFileSize?: number;
    readonly TotalFileCount?: number;
    readonly TotalFileSize?: number;
    readonly StillCounting?: boolean;
    readonly ActiveTransfers?: Array<ActiveTransfer> | null;
};

export type IsBackupActiveDto = {
    Status?: (string) | null;
    Active?: boolean;
};

export type IsDbUsedElsewhereDto = {
    inuse?: boolean;
};

export type IssueSigninTokenInputDto = {
    Password?: (string) | null;
};

export type IWebModule = {
    readonly Key?: (string) | null;
    readonly DisplayName?: (string) | null;
    readonly Description?: (string) | null;
    readonly SupportedCommands?: Array<ICommandLineArgument> | null;
};

export type LicenseDto = {
    Title?: (string) | null;
    Url?: (string) | null;
    License?: (string) | null;
    Jsondata?: (string) | null;
};

export type ListFilesetsRequestDto = {
    BackupId?: (string) | null;
};

export type ListFilesetsResponseDto = {
    Success?: boolean;
    Error?: (string) | null;
    StatusCode?: (string) | null;
    Data?: Array<ListFilesetsResponseItem> | null;
    PageInfo?: PageInfo;
};

export type ListFilesetsResponseItem = {
    Version?: number;
    Time?: string;
    IsFullBackup?: (boolean) | null;
    FileCount?: (number) | null;
    FileSizes?: (number) | null;
};

export type ListFileVersionsItemDto = {
    Version?: number;
    Time?: string;
    Path?: (string) | null;
    Size?: number;
    IsDirectory?: boolean;
    IsSymlink?: boolean;
    LastModified?: string;
};

export type ListFileVersionsOutputDto = {
    Success?: boolean;
    Error?: (string) | null;
    StatusCode?: (string) | null;
    Data?: Array<ListFileVersionsItemDto> | null;
    PageInfo?: PageInfo;
};

export type ListFileVersionsRequestDto = {
    PageSize?: (number) | null;
    Page?: (number) | null;
    BackupId?: (string) | null;
    Paths?: Array<(string)> | null;
};

export type ListFolderContentItemDto = {
    Path?: (string) | null;
    Size?: number;
    IsDirectory?: boolean;
    IsSymlink?: boolean;
    LastModified?: string;
};

export type ListFolderContentRequestDto = {
    PageSize?: (number) | null;
    Page?: (number) | null;
    BackupId?: (string) | null;
    Paths?: Array<(string)> | null;
    Time?: (string) | null;
};

export type ListFolderContentResponseDto = {
    Success?: boolean;
    Error?: (string) | null;
    StatusCode?: (string) | null;
    Data?: Array<ListFolderContentItemDto> | null;
    PageInfo?: PageInfo;
};

export type LiveControlState = 'Running' | 'Paused';

export type LocaleDto = {
    Code?: (string) | null;
    EnglishName?: (string) | null;
    DisplayName?: (string) | null;
};

export type LogEntry = {
    When?: string;
    ID?: number;
    Message?: (string) | null;
    Tag?: (string) | null;
    MessageID?: (string) | null;
    ExceptionID?: (string) | null;
    Type?: LogMessageType;
    Exception?: (string) | null;
    BackupID?: (string) | null;
    TaskID?: (string) | null;
};

export type LoginInputDto = {
    Password?: (string) | null;
    RememberMe?: (boolean) | null;
};

export type LogMessageType = 'ExplicitOnly' | 'Profiling' | 'Verbose' | 'Retry' | 'Information' | 'DryRun' | 'Warning' | 'Error';

export type NotificationDto = {
    ID?: number;
    Type?: NotificationType;
    Title?: (string) | null;
    Message?: (string) | null;
    Exception?: (string) | null;
    BackupID?: (string) | null;
    Action?: (string) | null;
    Timestamp?: string;
    LogEntryID?: (string) | null;
    MessageID?: (string) | null;
    MessageLogTag?: (string) | null;
};

export type NotificationType = 'Information' | 'Warning' | 'Error';

export type PageInfo = {
    Page?: number;
    PageSize?: number;
    Total?: number;
    Pages?: number;
};

export type RemoteControlStatusOutput = {
    CanEnable?: boolean;
    IsEnabled?: boolean;
    IsConnected?: boolean;
    IsRegistering?: boolean;
    IsRegisteringFaulted?: boolean;
    IsRegisteringCompleted?: boolean;
    RegistrationUrl?: (string) | null;
};

export type RemoteOperationInput = {
    path?: (string) | null;
};

export type RepairInputDto = {
    only_paths?: (boolean) | null;
    time?: (string) | null;
    version?: (string) | null;
    paths?: Array<(string)> | null;
};

export type RestoreInputDto = {
    paths?: Array<(string)> | null;
    passphrase?: (string) | null;
    time?: (string) | null;
    restore_path?: (string) | null;
    overwrite?: (boolean) | null;
    permissions?: (boolean) | null;
    skip_metadata?: (boolean) | null;
};

export type ScheduleDto = {
    ID?: number;
    Tags?: Array<(string)> | null;
    Time?: string;
    Repeat?: (string) | null;
    LastRun?: string;
    Rule?: (string) | null;
    AllowedDays?: Array<DayOfWeek> | null;
};

export type ScheduleInputDto = {
    ID?: number;
    Tags?: Array<(string)> | null;
    Time?: (string) | null;
    Repeat?: (string) | null;
    LastRun?: (string) | null;
    Rule?: (string) | null;
    AllowedDays?: Array<DayOfWeek> | null;
};

export type SearchEntriesItemDto = {
    Version?: number;
    Time?: string;
    Path?: (string) | null;
    Size?: number;
    IsDirectory?: boolean;
    IsSymlink?: boolean;
    LastModified?: string;
};

export type SearchEntriesRequestDto = {
    PageSize?: (number) | null;
    Page?: (number) | null;
    BackupId?: (string) | null;
    Paths?: Array<(string)> | null;
    Filters?: Array<(string)> | null;
    Time?: (string) | null;
};

export type SearchEntriesResponseDto = {
    Success?: boolean;
    Error?: (string) | null;
    StatusCode?: (string) | null;
    Data?: Array<SearchEntriesItemDto> | null;
    PageInfo?: PageInfo;
};

export type ServerStatusDto = {
    ActiveTask?: Int64StringTuple;
    ProgramState?: LiveControlState;
    SchedulerQueueIds?: Array<Int64StringTuple> | null;
    ProposedSchedule?: Array<StringDateTimeTuple> | null;
    HasWarning?: boolean;
    HasError?: boolean;
    SuggestedStatusIcon?: SuggestedStatusIcon;
    EstimatedPauseEnd?: string;
    LastEventID?: number;
    LastDataUpdateID?: number;
    LastNotificationUpdateID?: number;
    UpdatedVersion?: (string) | null;
    UpdaterState?: UpdatePollerStates;
    UpdateDownloadLink?: (string) | null;
    UpdateDownloadProgress?: number;
    readonly Type?: (string) | null;
};

export type SettingDto = {
    Filter?: (string) | null;
    Name?: (string) | null;
    Value?: (string) | null;
    Argument?: ICommandLineArgument;
};

export type SettingInputDto = {
    Filter?: (string) | null;
    Name?: (string) | null;
    Value?: (string) | null;
};

export type SigninInputDto = {
    SigninToken?: (string) | null;
    RememberMe?: (boolean) | null;
};

export type SigninTokenOutputDto = {
    Token?: (string) | null;
};

export type SingleOperationTokenOutputDto = {
    Token?: (string) | null;
};

export type SpecialFolderDto = {
    ID?: (string) | null;
    Path?: (string) | null;
};

export type StartRegistrationInput = {
    RegistrationUrl?: (string) | null;
};

export type StringDateTimeTuple = {
    Item1?: (string) | null;
    Item2?: string;
};

export type SuggestedStatusIcon = 'Ready' | 'ReadyWarning' | 'ReadyError' | 'Paused' | 'Active' | 'ActivePaused' | 'Disconnected';

export type SystemInfoDto = {
    APIVersion?: number;
    PasswordPlaceholder?: (string) | null;
    ServerVersion?: (string) | null;
    ServerVersionName?: (string) | null;
    ServerVersionType?: (string) | null;
    RemoteControlRegistrationUrl?: (string) | null;
    StartedBy?: (string) | null;
    DefaultUpdateChannel?: (string) | null;
    DefaultUsageReportLevel?: (string) | null;
    ServerTime?: string;
    ServerTimeZone?: (string) | null;
    OSType?: (string) | null;
    OSVersion?: (string) | null;
    DirectorySeparator?: string;
    PathSeparator?: string;
    CaseSensitiveFilesystem?: boolean;
    MachineName?: (string) | null;
    PackageTypeId?: (string) | null;
    UserName?: (string) | null;
    NewLine?: (string) | null;
    CLRVersion?: (string) | null;
    Options?: Array<ICommandLineArgument> | null;
    CompressionModules?: Array<IDynamicModule> | null;
    EncryptionModules?: Array<IDynamicModule> | null;
    BackendModules?: Array<IDynamicModule> | null;
    GenericModules?: Array<IDynamicModule> | null;
    WebModules?: Array<IDynamicModule> | null;
    ConnectionModules?: Array<IDynamicModule> | null;
    ServerModules?: Array<unknown> | null;
    SecretProviderModules?: Array<IDynamicModule> | null;
    UsingAlternateUpdateURLs?: boolean;
    LogLevels?: Array<(string)> | null;
    SpecialFolders?: Array<SpecialFolderDto> | null;
    BrowserLocale?: LocaleDto;
    SupportedLocales?: Array<LocaleDto> | null;
    BrowserLocaleSupported?: boolean;
    TimeZones?: Array<TimeZoneDto> | null;
    APIExtensions?: Array<(string)> | null;
    APIScopes?: Array<(string)> | null;
};

export type TaskStartedDto = {
    Status?: (string) | null;
    ID?: number;
};

export type TimeZoneDto = {
    ID?: (string) | null;
    DisplayName?: (string) | null;
    CurrentUTCOffset?: (string) | null;
};

export type TreeNodeDto = {
    text?: (string) | null;
    id?: (string) | null;
    cls?: (string) | null;
    iconCls?: (string) | null;
    check?: boolean;
    leaf?: boolean;
    resolvedpath?: (string) | null;
    hidden?: boolean;
    systemFile?: boolean;
    temporary?: boolean;
    symlink?: boolean;
    fileSize?: number;
};

export type UpdateCertificateInputDto = {
    Certificate?: (string) | null;
    Password?: (string) | null;
};

export type UpdateDbPathInputDto = {
    path?: (string) | null;
};

export type UpdatePollerStates = 'Waiting' | 'Checking' | 'Downloading';

export type WebModuleOutputDto = {
    Status?: (string) | null;
    Result?: {
        [key: string]: (string);
    } | null;
};

export type GetApiV1CommandlineResponse = (Array<(string)>);

export type PostApiV1CommandlineData = {
    requestBody: Array<(string)>;
};

export type PostApiV1CommandlineResponse = (CommandlineTaskStartedDto);

export type GetApiV1AcknowledgementsResponse = (AcknowlegdementDto);

export type PostApiV1AuthRefreshResponse = (AccessTokenOutputDto);

export type PostApiV1AuthSigninData = {
    requestBody: SigninInputDto;
};

export type PostApiV1AuthSigninResponse = (AccessTokenOutputDto);

export type PostApiV1AuthLoginData = {
    requestBody: LoginInputDto;
};

export type PostApiV1AuthLoginResponse = (AccessTokenOutputDto);

export type PostApiV1AuthIssuesignintokenData = {
    requestBody: IssueSigninTokenInputDto;
};

export type PostApiV1AuthIssuesignintokenResponse = (SigninTokenOutputDto);

export type PostApiV1AuthRefreshLogoutResponse = (unknown);

export type PostApiV1AuthIssuetokenByOperationData = {
    operation: string;
};

export type PostApiV1AuthIssuetokenByOperationResponse = (SingleOperationTokenOutputDto);

export type PostApiV1AuthIssueForeverTokenResponse = (AccessTokenOutputDto);

export type GetApiV1BackupdefaultsResponse = (string);

export type GetApiV1BackupsData = {
    orderBy?: string;
};

export type GetApiV1BackupsResponse = (Array<BackupAndScheduleOutputDto>);

export type PostApiV1BackupsData = {
    existingdb?: boolean;
    requestBody: BackupAndScheduleInputDto;
    temporary?: boolean;
};

export type PostApiV1BackupsResponse = (CreateBackupDto);

export type PostApiV1BackupsImportData = {
    requestBody: ImportBackupInputDto;
};

export type PostApiV1BackupsImportResponse = (ImportBackupOutputDto);

export type GetApiV1BugreportByReportidData = {
    reportid: number;
    token: string;
};

export type GetApiV1BugreportByReportidResponse = (unknown);

export type GetApiV1ChangelogData = {
    fromUpdate?: boolean;
};

export type GetApiV1ChangelogResponse = (ChangelogDto);

export type GetApiV1CommandlineByRunidData = {
    offset?: number;
    pagesize?: number;
    runid: string;
};

export type GetApiV1CommandlineByRunidResponse = (CommandLineLogOutputDto);

export type PostApiV1CommandlineByRunidAbortData = {
    runid: string;
};

export type PostApiV1CommandlineByRunidAbortResponse = (unknown);

export type PostApiV1FilesystemData = {
    onlyFolders?: boolean;
    requestBody: FilesystemInput;
    showHidden?: boolean;
};

export type PostApiV1FilesystemResponse = (Array<TreeNodeDto>);

export type PostApiV1FilesystemValidateData = {
    requestBody: FilesystemInput;
};

export type PostApiV1FilesystemValidateResponse = (unknown);

export type GetApiV1HypervResponse = (Array<TreeNodeDto>);

export type GetApiV1HypervByKeyData = {
    key: string;
};

export type GetApiV1HypervByKeyResponse = (Array<TreeNodeDto>);

export type GetApiV1LicensesResponse = (Array<LicenseDto>);

export type GetApiV1LogdataPollData = {
    id: number;
    level: LogMessageType;
    pagesize?: number;
};

export type GetApiV1LogdataPollResponse = (Array<LogEntry>);

export type GetApiV1LogdataLogData = {
    offset?: number;
    pagesize?: number;
};

export type GetApiV1LogdataLogResponse = (Array<{
    [key: string]: unknown;
}>);

export type GetApiV1LogdataCrashlogResponse = (CrashLogOutputDto);

export type GetApiV1MssqlResponse = (Array<TreeNodeDto>);

export type GetApiV1MssqlByKeyData = {
    key: string;
};

export type GetApiV1MssqlByKeyResponse = (Array<TreeNodeDto>);

export type GetApiV1NotificationByIdData = {
    id: number;
};

export type GetApiV1NotificationByIdResponse = (NotificationDto);

export type DeleteApiV1NotificationByIdData = {
    id: number;
};

export type DeleteApiV1NotificationByIdResponse = (unknown);

export type GetApiV1NotificationsResponse = (Array<NotificationDto>);

export type GetApiV1ProgressstateResponse = (IProgressEventData);

export type GetApiV1RemotecontrolStatusResponse = (RemoteControlStatusOutput);

export type PostApiV1RemoteoperationDbpathData = {
    requestBody: RemoteOperationInput;
};

export type PostApiV1RemoteoperationDbpathResponse = (GetDbPathDto);

export type PostApiV1RemoteoperationTestData = {
    autocreate?: boolean;
    requestBody: RemoteOperationInput;
};

export type PostApiV1RemoteoperationTestResponse = (unknown);

export type PostApiV1RemoteoperationCreateData = {
    requestBody: RemoteOperationInput;
};

export type PostApiV1RemoteoperationCreateResponse = (unknown);

export type GetApiV1ServersettingsResponse = ({
    [key: string]: (string);
});

export type PatchApiV1ServersettingsData = {
    requestBody: {
        [key: string]: unknown;
    };
};

export type PatchApiV1ServersettingsResponse = (unknown);

export type GetApiV1ServersettingByKeyData = {
    key: string;
};

export type GetApiV1ServersettingByKeyResponse = (string);

export type PutApiV1ServersettingByKeyData = {
    key: string;
    requestBody: string;
};

export type PutApiV1ServersettingByKeyResponse = (unknown);

export type GetApiV1ServerstateData = {
    duration?: string;
    lastEventId?: number;
    longpoll?: boolean;
};

export type GetApiV1ServerstateResponse = (ServerStatusDto);

export type PostApiV1ServerstatePauseData = {
    duration?: string;
    pauseTransfers?: boolean;
};

export type PostApiV1ServerstatePauseResponse = (unknown);

export type PostApiV1ServerstateResumeResponse = (unknown);

export type GetApiV1SysteminfoResponse = (SystemInfoDto);

export type GetApiV1SysteminfoFiltergroupsResponse = (FilterGroupsDto);

export type GetApiV1TasksResponse = (Array<GetTaskStateDto>);

export type GetApiV1TaskByTaskidData = {
    taskid: number;
};

export type GetApiV1TaskByTaskidResponse = (GetTaskStateDto);

export type PostApiV1TaskByTaskidStopData = {
    taskid: number;
};

export type PostApiV1TaskByTaskidStopResponse = (unknown);

export type PostApiV1TaskByTaskidAbortData = {
    taskid: number;
};

export type PostApiV1TaskByTaskidAbortResponse = (unknown);

export type GetApiV1UisettingsResponse = (Array<(string)>);

export type PostApiV1UisettingsData = {
    requestBody: UpdateCertificateInputDto;
};

export type PostApiV1UisettingsResponse = (unknown);

export type GetApiV1UisettingsBySchemeData = {
    scheme: string;
};

export type GetApiV1UisettingsBySchemeResponse = ({
    [key: string]: (string);
});

export type PatchApiV1UisettingsBySchemeData = {
    requestBody: {
        [key: string]: (string);
    };
    scheme: string;
};

export type PatchApiV1UisettingsBySchemeResponse = (unknown);

export type PostApiV1UpdatesCheckResponse = (unknown);

export type PostApiV1WebmoduleByModulekeyData = {
    modulekey: string;
    requestBody: {
        [key: string]: (string);
    };
};

export type PostApiV1WebmoduleByModulekeyResponse = (WebModuleOutputDto);

export type GetApiV1BackupByIdData = {
    id: string;
};

export type GetApiV1BackupByIdResponse = (GetBackupResultDto);

export type PutApiV1BackupByIdData = {
    id: string;
    requestBody: BackupAndScheduleInputDto;
};

export type PutApiV1BackupByIdResponse = (unknown);

export type DeleteApiV1BackupByIdData = {
    deleteLocalDb?: boolean;
    deleteRemoteFiles?: boolean;
    force?: boolean;
    id: string;
};

export type DeleteApiV1BackupByIdResponse = (DeleteBackupOutputDto);

export type GetApiV1BackupByIdFilesData = {
    allVersions?: boolean;
    filter?: string;
    folderContents?: boolean;
    id: string;
    prefixOnly?: boolean;
    time?: string;
};

export type GetApiV1BackupByIdFilesResponse = ({
    [key: string]: unknown;
});

export type GetApiV1BackupByIdLogData = {
    id: string;
    offset?: number;
    pagesize?: number;
};

export type GetApiV1BackupByIdLogResponse = (Array<{
    [key: string]: unknown;
}>);

export type GetApiV1BackupByIdRemotelogData = {
    id: string;
    offset?: number;
    pagesize?: number;
};

export type GetApiV1BackupByIdRemotelogResponse = (Array<{
    [key: string]: unknown;
}>);

export type GetApiV1BackupByIdFilesetsData = {
    fromRemoteOnly?: boolean;
    id: string;
    includeMetadata?: boolean;
};

export type GetApiV1BackupByIdFilesetsResponse = (Array<IListResultFileset>);

export type GetApiV1BackupByIdExportArgsonlyData = {
    exportPasswords?: boolean;
    id: string;
    passphrase?: string;
};

export type GetApiV1BackupByIdExportArgsonlyResponse = (ExportArgsOnlyDto);

export type GetApiV1BackupByIdExportCmdlineData = {
    exportPasswords?: boolean;
    id: string;
    passphrase?: string;
};

export type GetApiV1BackupByIdExportCmdlineResponse = (ExportCommandlineDto);

export type GetApiV1BackupByIdExportData = {
    exportPasswords?: boolean;
    id: string;
    passphrase?: string;
    token: string;
};

export type GetApiV1BackupByIdExportResponse = (unknown);

export type GetApiV1BackupByIdIsdbusedelsewhereData = {
    id: string;
};

export type GetApiV1BackupByIdIsdbusedelsewhereResponse = (IsDbUsedElsewhereDto);

export type GetApiV1BackupByIdIsactiveData = {
    id: string;
};

export type GetApiV1BackupByIdIsactiveResponse = (IsBackupActiveDto);

export type PostApiV1BackupByIdDeletedbData = {
    id: string;
};

export type PostApiV1BackupByIdDeletedbResponse = (unknown);

export type PostApiV1BackupByIdMovedbData = {
    id: string;
    requestBody: UpdateDbPathInputDto;
};

export type PostApiV1BackupByIdMovedbResponse = (unknown);

export type PostApiV1BackupByIdUpdatedbData = {
    id: string;
    requestBody: UpdateDbPathInputDto;
};

export type PostApiV1BackupByIdUpdatedbResponse = (unknown);

export type PostApiV1BackupByIdRestoreData = {
    id: string;
    requestBody: RestoreInputDto;
};

export type PostApiV1BackupByIdRestoreResponse = (TaskStartedDto);

export type PostApiV1BackupByIdCreatereportData = {
    id: string;
};

export type PostApiV1BackupByIdCreatereportResponse = (TaskStartedDto);

export type PostApiV1BackupByIdRepairData = {
    id: string;
    requestBody?: RepairInputDto;
};

export type PostApiV1BackupByIdRepairResponse = (TaskStartedDto);

export type PostApiV1BackupByIdRepairupdateData = {
    id: string;
    requestBody?: RepairInputDto;
};

export type PostApiV1BackupByIdRepairupdateResponse = (TaskStartedDto);

export type PostApiV1BackupByIdVacuumData = {
    id: string;
};

export type PostApiV1BackupByIdVacuumResponse = (TaskStartedDto);

export type PostApiV1BackupByIdVerifyData = {
    id: string;
};

export type PostApiV1BackupByIdVerifyResponse = (TaskStartedDto);

export type PostApiV1BackupByIdCompactData = {
    id: string;
};

export type PostApiV1BackupByIdCompactResponse = (TaskStartedDto);

export type PostApiV1BackupByIdStartData = {
    id: string;
    skipQueue?: boolean;
};

export type PostApiV1BackupByIdStartResponse = (TaskStartedDto);

export type PostApiV1BackupByIdRunData = {
    id: string;
    skipQueue?: boolean;
};

export type PostApiV1BackupByIdRunResponse = (TaskStartedDto);

export type PostApiV1BackupByIdReportRemoteSizeData = {
    id: string;
};

export type PostApiV1BackupByIdReportRemoteSizeResponse = (TaskStartedDto);

export type PostApiV1BackupByIdCopytotempData = {
    id: string;
};

export type PostApiV1BackupByIdCopytotempResponse = (CreateBackupDto);

export type PostApiV1RemotecontrolEnableResponse = (RemoteControlStatusOutput);

export type PostApiV1RemotecontrolDisableResponse = (RemoteControlStatusOutput);

export type DeleteApiV1RemotecontrolRegistrationResponse = (RemoteControlStatusOutput);

export type PostApiV1RemotecontrolRegisterData = {
    requestBody: StartRegistrationInput;
};

export type PostApiV1RemotecontrolRegisterResponse = (RemoteControlStatusOutput);

export type DeleteApiV1RemotecontrolRegisterResponse = (RemoteControlStatusOutput);

export type PostApiV2BackupListFilesetsData = {
    requestBody: ListFilesetsRequestDto;
};

export type PostApiV2BackupListFilesetsResponse = (ListFilesetsResponseDto);

export type PostApiV2BackupListFolderData = {
    requestBody: ListFolderContentRequestDto;
};

export type PostApiV2BackupListFolderResponse = (ListFolderContentResponseDto);

export type PostApiV2BackupListVersionsData = {
    requestBody: ListFileVersionsRequestDto;
};

export type PostApiV2BackupListVersionsResponse = (ListFileVersionsOutputDto);

export type PostApiV2BackupSearchData = {
    requestBody: SearchEntriesRequestDto;
};

export type PostApiV2BackupSearchResponse = (SearchEntriesResponseDto);

export type PostApiV2DestinationTestData = {
    requestBody: DestinationTestRequestDto;
};

export type PostApiV2DestinationTestResponse = (DestinationTestResponseDto);

export type GetApiV1WebmodulesResponse = (Array<IWebModule>);